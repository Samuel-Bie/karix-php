<?php
/**
 * CreateMessageTest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Karix
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * karix api
 *
 * Karix API lets you interact with the Karix platform. It allows you to query your account, set up webhooks, send messages and buy phone numbers.
 *
 * OpenAPI spec version: 1.0
 * Contact: support@karix.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the model.
 */

namespace Karix;

/**
 * CreateMessageTest Class Doc Comment
 *
 * @category    Class
 * @description CreateMessage
 * @package     Karix
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CreateMessageTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test "CreateMessage"
     */
    public function testCreateMessage()
    {
    }

    /**
     * Test attribute "source"
     */
    public function testPropertySource()
    {
        $create_message = new \Karix\Model\CreateMessage();
        $source = "+14154009186";
        
        $create_message->setSource($source);
        $this->assertEquals($source, $create_message->getSource());

    }

    /**
     * Test attribute "destination"
     */
    public function testPropertyDestination()
    {
        $create_message = new \Karix\Model\CreateMessage();
        $create_message_destination = [];
        $subobj = "+15623158625";
        

        $create_message_destination[] = $subobj;
        $destination = $create_message_destination;
        
        $create_message->setDestination($destination);
        $this->assertEquals($destination, $create_message->getDestination());

    }

    /**
     * Test attribute "text"
     */
    public function testPropertyText()
    {
        $create_message = new \Karix\Model\CreateMessage();
        $text = "Hey, Rick. It's Rick.";
        
        $create_message->setText($text);
        $this->assertEquals($text, $create_message->getText());

        // Check for validations
        // Check for minLength 1
        $create_message->setText(str_repeat("a", 1));
        try
        {
            $create_message->setText(substr(str_repeat("a", 1), 0, -1));
            $this->fail("$create_message->setText accepted input less than 1");
        }
        catch(\InvalidArgumentException $e){}

    }

    /**
     * Test attribute "notification_url"
     */
    public function testPropertyNotificationUrl()
    {
        $create_message = new \Karix\Model\CreateMessage();
        $notification_url = "https://notification.example.com/message";
        
        $create_message->setNotificationUrl($notification_url);
        $this->assertEquals($notification_url, $create_message->getNotificationUrl());

    }

    /**
     * Test attribute "notification_method"
     */
    public function testPropertyNotificationMethod()
    {
        $create_message = new \Karix\Model\CreateMessage();
        $notification_method = "POST";
        
        $create_message->setNotificationMethod($notification_method);
        $this->assertEquals($notification_method, $create_message->getNotificationMethod());

        // Check for enum
        $create_message->setNotificationMethod("GET");
        $create_message->setNotificationMethod("POST");
        try
        {
            $create_message->setNotificationMethod("Invalid Edwfere");
            $this->fail("$create_message->setNotificationMethod accepted input outside of enum");
        }
        catch(\InvalidArgumentException $e){}

    }

    /**
    * Helper to create a good example of model
    */
    public function getGoodExample()
    {
        $source = "+14154009186";
        
        $create_message_destination = [];
        $subobj = "+15623158625";
        

        $create_message_destination[] = $subobj;
        $destination = $create_message_destination;
        
        $text = "Hey, Rick. It's Rick.";
        
        $notification_url = "https://notification.example.com/message";
        
        $notification_method = "POST";
        
        return array(
            "source" => $source,
            "destination" => $destination,
            "text" => $text,
            "notification_url" => $notification_url,
            "notification_method" => $notification_method,
        );
    }

    /**
    * Test CreateMessage validation
    */
    public function testValidation()
    {
        $example = $this->getGoodExample();
        $create_message = new \Karix\Model\CreateMessage($example);
        $this->assertTrue($create_message->valid());
    }

    /**
    *
    */
    public function testRequiredPropertySource()
    {
        $example = $this->getGoodExample();
        $example['source'] = null;
        $create_message = new \Karix\Model\CreateMessage($example);
        $this->assertFalse($create_message->valid());

        $invalidProperties = $create_message->listInvalidProperties();
        $this->assertContains("'source' can't be null", $invalidProperties);
    }

    /**
    *
    */
    public function testRequiredPropertyDestination()
    {
        $example = $this->getGoodExample();
        $example['destination'] = null;
        $create_message = new \Karix\Model\CreateMessage($example);
        $this->assertFalse($create_message->valid());

        $invalidProperties = $create_message->listInvalidProperties();
        $this->assertContains("'destination' can't be null", $invalidProperties);
    }

    /**
    *
    */
    public function testRequiredPropertyText()
    {
        $example = $this->getGoodExample();
        $example['text'] = null;
        $create_message = new \Karix\Model\CreateMessage($example);
        $this->assertFalse($create_message->valid());

        $invalidProperties = $create_message->listInvalidProperties();
        $this->assertContains("'text' can't be null", $invalidProperties);
    }

    /**
    *
    */
    public function testMinLengthPropertyText()
    {
        $example = $this->getGoodExample();

        $example['text'] = substr(str_repeat("a", 1), 0, -1);

        $create_message = new \Karix\Model\CreateMessage($example);
        $this->assertFalse($create_message->valid());

        $invalidProperties = $create_message->listInvalidProperties();
        $this->assertContains("invalid value for 'text', the character length must be bigger than or equal to 1.", $invalidProperties);
    }

    /**
    *
    */
    public function testEnumPropertyNotificationMethod()
    {
        $example = $this->getGoodExample();
        $example['notification_method'] = "Invalid Edwfere";
        $create_message = new \Karix\Model\CreateMessage($example);
        $this->assertFalse($create_message->valid());

        $allowedValues = $create_message->getNotificationMethodAllowableValues();
        $err_msg = sprintf(
            "invalid value for 'notification_method', must be one of '%s'",
            implode("', '", $allowedValues)
        );
        $invalidProperties = $create_message->listInvalidProperties();
        $this->assertContains($err_msg, $invalidProperties);
    }

}
