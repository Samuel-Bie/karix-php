<?php
/**
 * CreateWebhookTest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Karix
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * karix api
 *
 * Karix API lets you interact with the Karix platform. It allows you to query your account, set up webhooks, send messages and buy phone numbers.
 *
 * OpenAPI spec version: 1.0
 * Contact: support@karix.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the model.
 */

namespace Karix;

/**
 * CreateWebhookTest Class Doc Comment
 *
 * @category    Class
 * @description CreateWebhook
 * @package     Karix
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CreateWebhookTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test "CreateWebhook"
     */
    public function testCreateWebhook()
    {
    }

    /**
     * Test attribute "sms_notification_url"
     */
    public function testPropertySmsNotificationUrl()
    {
        $create_webhook = new \Karix\Model\CreateWebhook();
        $sms_notification_url = "https://notification.example.com/sms";
        
        $create_webhook->setSmsNotificationUrl($sms_notification_url);
        $this->assertEquals($sms_notification_url, $create_webhook->getSmsNotificationUrl());

    }

    /**
     * Test attribute "sms_notification_method"
     */
    public function testPropertySmsNotificationMethod()
    {
        $create_webhook = new \Karix\Model\CreateWebhook();
        $sms_notification_method = "POST";
        
        $create_webhook->setSmsNotificationMethod($sms_notification_method);
        $this->assertEquals($sms_notification_method, $create_webhook->getSmsNotificationMethod());

    }

    /**
     * Test attribute "sms_notification_fallback_url"
     */
    public function testPropertySmsNotificationFallbackUrl()
    {
        $create_webhook = new \Karix\Model\CreateWebhook();
        $sms_notification_fallback_url = "https://notification.example.com/sms";
        
        $create_webhook->setSmsNotificationFallbackUrl($sms_notification_fallback_url);
        $this->assertEquals($sms_notification_fallback_url, $create_webhook->getSmsNotificationFallbackUrl());

    }

    /**
     * Test attribute "sms_notification_fallback_method"
     */
    public function testPropertySmsNotificationFallbackMethod()
    {
        $create_webhook = new \Karix\Model\CreateWebhook();
        $sms_notification_fallback_method = "POST";
        
        $create_webhook->setSmsNotificationFallbackMethod($sms_notification_fallback_method);
        $this->assertEquals($sms_notification_fallback_method, $create_webhook->getSmsNotificationFallbackMethod());

    }

    /**
     * Test attribute "name"
     */
    public function testPropertyName()
    {
        $create_webhook = new \Karix\Model\CreateWebhook();
        $name = "webhook_1";
        
        $create_webhook->setName($name);
        $this->assertEquals($name, $create_webhook->getName());

    }

    /**
    * Helper to create a good example of model
    */
    public function getGoodExample()
    {
        $sms_notification_url = "https://notification.example.com/sms";
        
        $sms_notification_method = "POST";
        
        $sms_notification_fallback_url = "https://notification.example.com/sms";
        
        $sms_notification_fallback_method = "POST";
        
        $name = "webhook_1";
        
        return array(
            "sms_notification_url" => $sms_notification_url,
            "sms_notification_method" => $sms_notification_method,
            "sms_notification_fallback_url" => $sms_notification_fallback_url,
            "sms_notification_fallback_method" => $sms_notification_fallback_method,
            "name" => $name,
        );
    }

    /**
    * Test CreateWebhook validation
    */
    public function testValidation()
    {
        $example = $this->getGoodExample();
        $create_webhook = new \Karix\Model\CreateWebhook($example);
        $this->assertTrue($create_webhook->valid());
    }

    /**
    *
    */
    public function testRequiredPropertySmsNotificationUrl()
    {
        $example = $this->getGoodExample();
        $example['sms_notification_url'] = null;
        $create_webhook = new \Karix\Model\CreateWebhook($example);
        $this->assertFalse($create_webhook->valid());

        $invalidProperties = $create_webhook->listInvalidProperties();
        $this->assertContains("'sms_notification_url' can't be null", $invalidProperties);
    }

    /**
    *
    */
    public function testRequiredPropertySmsNotificationMethod()
    {
        $example = $this->getGoodExample();
        $example['sms_notification_method'] = null;
        $create_webhook = new \Karix\Model\CreateWebhook($example);
        $this->assertFalse($create_webhook->valid());

        $invalidProperties = $create_webhook->listInvalidProperties();
        $this->assertContains("'sms_notification_method' can't be null", $invalidProperties);
    }

    /**
    *
    */
    public function testRequiredPropertyName()
    {
        $example = $this->getGoodExample();
        $example['name'] = null;
        $create_webhook = new \Karix\Model\CreateWebhook($example);
        $this->assertFalse($create_webhook->valid());

        $invalidProperties = $create_webhook->listInvalidProperties();
        $this->assertContains("'name' can't be null", $invalidProperties);
    }

}
